version: 2
jobs:
  unit_test:
    docker:
      # Node 8 LTS
      - image: circleci/node:carbon
    steps:
      - checkout
      - run: npm install
      - run: npm run lint
      - run: npm run test:unit

  integration_test:
#    machine:
#        enabled: true
#    steps:
#      - persist_to_workspace:
#           root: /root/app
#           path: .
#      - checkout
#      - run:
#          name: Install Docker Compose
#          command: |
#            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
#            chmod +x ~/docker-compose
#            sudo mv ~/docker-compose /usr/local/bin/docker-compose
#      - run:
#          name: Start container and verify it's working
#          command: |
#            set -x
#            docker ps -a
#      - run:
#          name: Start container and verify it's working
#          command: |
#            set -x
#            docker-compose up -d
    docker:
      # Node 8 LTS
      - image: circleci/node:carbon
    steps:
      - checkout
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo sudo > ~/sudo
            else
              echo "This is not a local build. Disabling sudo for docker"
              touch ~/sudo
            fi

      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.19.0/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - setup_remote_docker
      - run:
          name: Start databases
          command: |
            set -x
            eval `cat ~/sudo` docker-compose -p aerogeardatasyncserver down
            eval `cat ~/sudo` docker-compose -p aerogeardatasyncserver rm --force
            eval `cat ~/sudo` docker-compose -p aerogeardatasyncserver up -d
#      - run:
#          name: Wait for configuration database to start up
#          command: dockerize -wait tcp://localhost:5432 -timeout 120s
#      - run:
#          name: Wait for memeolist database to start up
#          command: dockerize -wait tcp://localhost:15432 -timeout 120s
      - run: npm install
      - run: npm run db:init
      - run:
          command: npm run dev
          background: true
      - run: npm install tap-xunit --dev
      - run: mkdir -p ~/reports
      - run: ./node_modules/.bin/ava  --concurrency=1 --tap integration_test/*.test.js | ./node_modules/.bin/tap-xunit > ~/reports/ava.xml
      - store_test_results:
          path: ~/reports
      - store_artifacts:
          path: ~/reports

      - run:
          name: Remove created database containers
          command: |
            set -x
            eval `cat ~/sudo` docker-compose -p aerogeardatasyncserver down
            eval `cat ~/sudo` docker-compose -p aerogeardatasyncserver rm --force
          when: on_fail

#      - run:
#          name: Start container and verify it's working
#          command: |
#            set -x
#            eval `cat ~/sudo` docker run postgres:9.6

#    docker:
#      # Node 8 LTS
#      - image: circleci/node:carbon
#      # configuration database
#      - image: circleci/postgres:9.6.2-alpine
#        name: config_postgres
#        environment:
#            POSTGRES_USER: postgresql
#            POSTGRES_PASSWORD: postgres
#            POSTGRES_DB: aerogear_data_sync_db
#      # memeolist database
#      - image: circleci/postgres:9.6.2-alpine
#        name: memeolist_postgres
#        environment:
#            POSTGRES_USER: postgresql
#            POSTGRES_PASSWORD: postgres
#            POSTGRES_DB: memeolist_db
#    steps:
#      - checkout
#      - run:
#          name: Wait for configuration database to start up
#          command: dockerize -wait tcp://config_postgres:5432 -timeout 120s
#      - run:
#          name: Wait for memeolist database to start up
#          command: dockerize -wait tcp://memeolist_postgres:5432 -timeout 120s
#      - run: npm install
#      - run: npm run db:init
#      - run:
#          command: npm run dev
#          background: true
#      - run: npm install tap-xunit --dev
#      - run: mkdir -p ~/reports
#      - run: ./node_modules/.bin/ava  --concurrency=1 --tap integration_test/*.test.js | ./node_modules/.bin/tap-xunit > ~/reports/ava.xml
#      - store_test_results:
#          path: ~/reports
#      - store_artifacts:
#          path: ~/reports

  docker_push_master:
    docker:
      # Node 8 LTS
      - image: circleci/node:carbon
    steps:
      - checkout
      - setup_remote_docker
      - run: npm run docker:build
      - run: npm run docker:push

  docker_push_release:
    docker:
      # Node 8 LTS
      - image: circleci/node:carbon
    steps:
      - checkout
      - setup_remote_docker
      - run: npm run release:validate
      - run: npm run docker:build:release
      - run: npm run docker:push:release

workflows:
  version: 2
  build_and_push:
    jobs:
      - unit_test:
          filters:
            tags:
              only: /.*/
      - integration_test:
          filters:
            tags:
              only: /.*/
      - docker_push_master:
          requires:
            - unit_test
            - integration_test
          filters:
            branches:
              only:
                - master
      - docker_push_release:
          requires:
            - unit_test
            - integration_test
          filters:
            tags:
              only: /.*/ # allow anything because tag syntax is validated as part of validate-release.sh
            branches:
              ignore: /.*/